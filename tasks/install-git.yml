---


- name: "Remove {{ forksComponentIdentifier|capitalize }} application directory"
  become: true
  file: 
    path: "{{ forksComponentApplicationDirectory }}"
    state: absent


- name: "Clone {{ forksComponentIdentifier|capitalize }} blockchain repository into source directory"
  become: true
  become_user: "{{ forksComponentSystemUsername }}"
  git:
    dest: "{{ forksComponentApplicationDirectory }}"
    repo: "https://github.com/{{ forksComponentRepositoryIdentifier }}.git"
    force: yes
    update: yes
    recursive: yes
    version: "{{ forksComponentBranch }}"
    umask: '0027'

- name: Make installer executable
  become: true
  file: 
    path: "{{ forksComponentApplicationDirectory }}/install.sh"
    mode: 0750


- name: "Install {{ forksComponentIdentifier|capitalize }} blockchain"
  when: not 'env' in forksComponentItem
  become: true
  become_user: "{{ forksComponentSystemUsername }}"
  shell: ./install.sh
  args:
    chdir: "{{ forksComponentApplicationDirectory }}"
    executable: /bin/sh
  async: "{{ (1800 * forksJobTimeFactor)|int }}" # 30 mins * time factor
  poll: 0
  register: installBlockchainJob

- name: "Wait for {{ forksComponentIdentifier|capitalize }} blockchain being installed"
  when: not 'env' in forksComponentItem
  become: true
  become_user: "{{ forksComponentSystemUsername }}"
  async_status:
    jid: "{{ installBlockchainJob.ansible_job_id }}"
  register: asyncStatusResult
  until: asyncStatusResult.finished
  retries: "{{ (120 * forksJobTimeFactor)|int }}" # 30 mins * time factor
  delay: 15

- name: "Install {{ forksComponentIdentifier|capitalize }} blockchain (additional environment variables)"
  when: "'env' in forksComponentItem"
  become: true
  become_user: "{{ forksComponentSystemUsername }}"
  shell: ./install.sh
  args:
    chdir: "{{ forksComponentApplicationDirectory }}"
    executable: /bin/sh
  environment: "{{ forkBuildRequirementsDescriptor.env }}"
  async: "{{ (1800 * forksJobTimeFactor)|int }}" # 30 mins * time factor
  poll: 0
  register: installBlockchainJob

- name: "Wait for {{ forksComponentIdentifier|capitalize }} blockchain being installed (additional environment variables)"
  when: "'env' in forksComponentItem"
  become: true
  become_user: "{{ forksComponentSystemUsername }}"
  async_status:
    jid: "{{ installBlockchainJob.ansible_job_id }}"
  register: asyncStatusResult
  until: asyncStatusResult.finished
  retries: "{{ (120 * forksJobTimeFactor)|int }}" # 30 mins * time factor
  delay: 15


- name: "Remove {{ forksComponentIdentifier|capitalize }} system user from sudo group"
  become: true
  shell: "deluser {{ forksComponentSystemUsername }} sudo"


  ## Fix permissions

- name: "Fix {{ forksComponentIdentifier|capitalize }} ssl permissions on mozilla-ca module"
  when: forkPermissionsFix
  become: true
  file:
    path: "{{ forksComponentApplicationDirectory }}/mozilla-ca"
    state: directory
    recurse: yes
    owner: "{{ forksComponentSystemUsername }}"
    group: "{{ forksComponentSystemUsername }}"
    mode: u=rwX,g=rX,o=rX

- name: "Fix {{ forksComponentIdentifier|capitalize }} ssl permissions"
  when: forkPermissionsFix
  become: true
  file:
    path: "{{ forksConfigurationDirectory }}/mainnet/config/ssl"
    state: directory
    recurse: yes
    owner: "{{ forksComponentSystemUsername }}"
    group: "{{ forksComponentSystemUsername }}"
    mode: u=rwX,g=,o=


## Initialize blockchain

- name: "Initialize {{ forksComponentIdentifier|capitalize }} blockchain"
  become: true
  become_user: "{{ forksComponentSystemUsername }}"
  shell: >
    . {{ forksComponentApplicationDirectory }}/venv/bin/activate &&
    {{ forksComponentExecutableName }} init
    {% if not forkPermissionsFix %}--fix-ssl-permissions{% endif %}
  args:
    chdir: "{{ forksComponentApplicationDirectory }}"
    executable: /bin/bash
  async: "{{ (1800 * forksJobTimeFactor)|int }}" # 30 mins * time factor
  poll: 0
  register: initializeBlockchainJob

- name: "Wait for {{ forksComponentIdentifier|capitalize }} blockchain being initialized"
  become: true
  become_user: "{{ forksComponentSystemUsername }}"
  async_status:
    jid: "{{ initializeBlockchainJob.ansible_job_id }}"
  register: asyncStatusResult
  until: asyncStatusResult.finished
  retries: "{{ (120 * forksJobTimeFactor)|int }}" # 30 mins * time factor
  delay: 15


#- name: "Store {{ forksComponentIdentifier|capitalize }} CA cert in organization product"
#  when: "'farmer' in forksComponentComponentType"
#  vars:
#    contextProductStoreAction: backup
#    contextComponentIdentifier: "{{ forksComponentIdentifier }}"
#    contextProductOrganization: "{{ forksVendorIdentifier }}"
#    contextProductLabel: "ca_cert-{{ ansible_host }}-{{ forksComponentIdentifier }}"
#    contextProductDirectory: "{{ forksConfigurationDirectory }}/mainnet/config/ssl/ca"
#  include_tasks: productStore.yml
#  tags: certificates

- name: "Generate {{ forksComponentIdentifier|capitalize }} service file"
  become: true
  template:
    src: "fork-git.service.j2"
    dest: "{{ forksSystemServiceDirectory }}/{{ forksServiceName }}.service"
    force: yes
    owner: root
    group: root
    mode: 0644


#- name: Link {{ forksComponentIdentifier|capitalize }} blockchain directory in Forktools root directory
#  become: true
#  file:
#    src: "{{ forksComponentApplicationDirectory }}"
#    dest: "{{ forksManagingHomeDirectory|default('/root') }}/.local/lib/fork.blockchain.root/{{ forksComponentApplicationDirectory|basename }}"
#    state: link
#  tags: utilities

#- name: Link {{ forksComponentIdentifier|capitalize }} configuration directory in Forktools root directory
#  become: true
#  file:
#    src: "{{ forksConfigurationDirectory }}"
#    dest: "{{ forksManagingHomeDirectory|default('/root') }}/.local/lib/fork.config.root/{{ forksConfigurationDirectory|basename }}"
#    state: link
#  tags: utilities

...
