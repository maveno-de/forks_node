---


- name: "Create local cache directory for Forks node {{ forksNodeIdentifier }}"
  when:
    - forksBackupDataDirectory is defined
    - "'node' in forksNodeConfiguration.services"
    - "'backupHour' in forksSettings[forkIdentifier].keys()"
    - "'backupMinute' in forksSettings[forkIdentifier].keys()"
  become: true
  file:
    path: "{{ forksNodeHomeDirectory }}/.local/forks/cache"
    state: directory
    owner: "{{ forksNodeSystemUsername }}"
    group: "{{ forksNodeSystemUsername }}"
    mode: 0750
  tags: backups

- name: "Generate backup scripts for Forks node {{ forksNodeIdentifier }}"
  when:
    - forksBackupDataDirectory is defined
    - "'node' in forksNodeConfiguration.services"
    - "'backupHour' in forksSettings[forkIdentifier].keys()"
    - "'backupMinute' in forksSettings[forkIdentifier].keys()"
  become: true
  template:
    src: backup-git.sh.j2
    dest: "{{ forksManagingHomeDirectory | default('/root') }}/.local/bin/backup-{{ forksNodeIdentifier }}.sh"
    force: true
    owner: "{{ forksManagingSystemUsername | default('root') }}"
    group: "{{ forksManagingSystemUsername | default('root') }}"
    mode: 0755
  tags: backups


- name: "Setup blockchain backup cronjob for Forks node {{ forksNodeIdentifier }}"
  when:
    - whichCrontabCommandResult.rc == 0
    - forksBackupDataDirectory is defined
    - "'node' in forksNodeConfiguration.services"
    - "'backupHour' in forksSettings[forkIdentifier].keys()"
    - "'backupMinute' in forksSettings[forkIdentifier].keys()"
  become: true
  cron:
    name: "{{ forksNodeIdentifier }} daily backup"
    user: "{{ forksManagingSystemUsername | default('root') }}"
    hour: "{{ forksSettings[forkIdentifier]['backupHour'] | default('undefined') }}"
    minute: "{{ forksSettings[forkIdentifier]['backupMinute'] | default('undefined') }}"
    job: >-
      sudo {{ forksManagingHomeDirectory | default('/root') }}/.local/bin/backup-{{ forksNodeIdentifier }}.sh
      >> {{ forksLoggingDirectory }}/{{ forksNodeIdentifier }}_daily_backup.log
  tags: backups


- name: "Generate daily backup service file for Forks node {{ forksNodeIdentifier }}"
  when: whichCrontabCommandResult.rc != 0
  become: true
  template:
    src: daily-backup.service.j2
    dest: "{{ forksSystemServiceDirectory }}/{{ forksNodeIdentifier }}-backup.service"
    mode: 0644

- name: "Generate daily backup timer file for Forks node {{ forksNodeIdentifier }}"
  when: whichCrontabCommandResult.rc != 0
  become: true
  template:
    src: daily-backup.timer.j2
    dest: "{{ forksSystemServiceDirectory }}/{{ forksNodeIdentifier }}-backup.timer"
    mode: 0644


- name: "Enable daily backup timer for Forks node {{ forksNodeIdentifier }}"
  when: whichCrontabCommandResult.rc != 0
  become: true
  systemd:
    name: "{{ forksNodeIdentifier }}-backup.timer"
    daemon-reload: true
    enabled: true


...
