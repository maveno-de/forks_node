---


- name: Create certificate temporary subdirectories
  delegate_to: localhost
  file:
    path: >-
      {{ forksCertificatesTempfileResult.path }}/{{
      forksNodeConfiguration.certs | default('undefined') }}
    state: directory
    mode: 0700
  run_once: true

- name: Find certificate files
  become: true
  delegate_to: "{{ certsSourceNodeHostname }}"
  vars:
    certsSourceNodeJsonQuery: >-
      [?value.forksHostConfiguration[?identifier=='{{
      forksNodeConfiguration.certs | default('undefined') }}'].identifier]
    certsSourceNodeHostname: >-
      {{ (hostvars | dict2items | json_query(certsSourceNodeJsonQuery))[0]['key'] }}
  find:
    paths: "{{ forksNodeHomeDirectory }}/{{ forksNodeConfigurationDirectoryName }}/mainnet/config/ssl/ca"
  register: forksCertificateFileFindResult

- name: Cert files
  when: forksNodeDebugLevel | int > 1
  debug:
    msg: "{{ forksCertificateFileFindResult }}"

- name: Fetch certificate files
  when: not forksCertificateFileFindResult is skipped
  become: true
  delegate_to: "{{ certsSourceNodeHostname }}"
  vars:
    certsSourceNodeJsonQuery: >-
      [?value.forksHostConfiguration[?identifier=='{{
      forksNodeConfiguration.certs | default('undefined') }}'].identifier]
    certsSourceNodeHostname: >-
      {{ (hostvars | dict2items
      | json_query(certsSourceNodeJsonQuery))[0]['key'] }}
  fetch:
    src: "{{ forksCertificateFileItem.path }}"
    dest: >-
      {{ forksCertificatesTempfileResult.path }}/{{
      forksNodeConfiguration.certs | default('undefined') }}/{{
      forksCertificateFileItem.path | basename }}
    flat: true
  loop: "{{ forksCertificateFileFindResult.files }}"
  loop_control:
    loop_var: forksCertificateFileItem

- name: Find fetched certificate files
  delegate_to: localhost
  become: true
  find:
    paths: >-
      {{ forksCertificatesTempfileResult.path }}/{{
      forksNodeConfiguration.certs | default('undefined') }}
    recurse: true
  register: fetchedCertFileFindResult
  run_once: true

- name: Fetched certificate files
  when: forksNodeDebugLevel | int > 1
  delegate_to: localhost
  debug:
    msg: "{{ fetchedCertFileFindResult.files | map(attribute='path') | list }}"
  run_once: true

- name: Fetched certificate files source node identifiers
  when: forksNodeDebugLevel | int > 1
  delegate_to: localhost
  debug:
    msg: "{{ certFileItem.split('/')[3] }}"
  run_once: true
  loop: "{{ fetchedCertFileFindResult.files | map(attribute='path') | list }}"
  loop_control:
    loop_var: certFileItem


- name: Create tempfile directories for certificates on target hosts
  become: true
  become_user: "{{ forksNodeSystemUsername }}"
  tempfile:
    state: directory
  register: forksCertificatesDeployedTempfileResult
  changed_when: false

- name: Copy certificate files to target hosts
  become: true
  copy:
    src: "{{ forksCertFilenameItem }}"
    dest: >-
      {{ forksCertificatesDeployedTempfileResult.path }}/{{
      forksCertFilenameItem | basename }}
    owner: "{{ forksNodeSystemUsername }}"
    group: "{{ forksNodeSystemUsername }}"
    mode: 0600
  loop: >-
    {{ fetchedCertFileFindResult.files
    | map(attribute='path') | list }}
  loop_control:
    loop_var: forksCertFilenameItem

- name: Check files
  when: forksNodeDebugLevel | int > 1
  become: true
  command: "find {{ deployedTempfileResultItem.path }}"
  register: findResult

- name: Fetched files
  when: forksNodeDebugLevel | int > 1
  debug:
    msg: "{{ findResult }}"


- name: Create new client certs
  become: true
  become_user: "{{ forksNodeSystemUsername }}"
  shell: >-
    . .bashrc &&
    {{ forksNodeExecutableName }} init
    -c {{ forksCertificatesDeployedTempfileResult.path }}
  args:
    chdir: "{{ forksNodeHomeDirectory }}"
    executable: /bin/bash


...
