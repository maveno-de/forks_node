---


- name: "Clone chia-docker repository for {{ forkIdentifier|capitalize }}"
  become: yes
  become_user: "{{ forkSystemUsername }}"
  git:
    repo: https://github.com/maveno-de/chia-docker.git
    version: "{{ forkIdentifier }}-{{ mavenoForksArchitectureLookupTable[mavenoSystemArchitecture] }}"
    dest: "{{ forkHomeDirectory }}/.local/share/chia-docker"
    force: yes
  environment:
    SSL_CERT_DIR: /etc/ssl/certs
    REQUESTS_CA_BUNDLE: "{{ mavenoSystemCaCertificatesFilePath }}"


- name: "Build {{ forkIdentifier|capitalize }} docker image"
  become: yes
  become_user: "{{ forkSystemUsername }}"
  community.docker.docker_image:
    name: "{{ forkIdentifier }}"
    build:
      nocache: yes
      path: "{{ forkHomeDirectory }}/.local/share/chia-docker"
      platform: "{{ mavenoForksPlatformLookupTable[mavenoSystemArchitecture] }}"
    source: build
    docker_host: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
  async: "{{ (1800 * mavenoJobTimeFactor)|int }}" # 30 mins * time factor
  poll: 0
  register: forkDockerImageBuildJob

- name: "Build {{ forkIdentifier|capitalize }} docker image"
  when: "'branch' in forkBuildRequirementsDescriptor.keys()"
  become: yes
  become_user: "{{ forkSystemUsername }}"
  community.docker.docker_image:
    name: "{{ forkIdentifier }}"
    build:
      nocache: yes
      path: "{{ forkHomeDirectory }}/.local/share/chia-docker"
      platform: "{{ mavenoForksPlatformLookupTable[mavenoSystemArchitecture] }}"
      args:
        BRANCH: "{{ forkBuildRequirementsDescriptor.branch }}"
    source: build
    docker_host: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
  async: "{{ (1800 * mavenoJobTimeFactor)|int }}" # 30 mins * time factor
  poll: 0
  register: forkDockerImageBuildJob


- name: "Wait for {{ forkIdentifier|capitalize }} docker image being built"
  become: yes
  become_user: "{{ forkSystemUsername }}"
  async_status:
    jid: "{{ forkDockerImageBuildJob.ansible_job_id }}"
  register: asyncStatusResult
  until: asyncStatusResult.finished
  retries: "{{ (90 * mavenoJobTimeFactor)|int }}" # 30 mins * time factor
  delay: 20



- name: Start {{ forkIdentifier|capitalize }} docker network
  become: yes
  become_user: "{{ forkSystemUsername }}"
  community.docker.docker_network:
    name: "{{ forkIdentifier }}-network"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
    DOCKER_HOST: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"


  ## Fullnode/Wallet container

  #TODO: [WARNING]: Docker warning: The requested image's platform (linux/arm64/v8) does not match the detected host platform (linux/arm/v7) and no specific platform was requested
- name: "Start {{ forkIdentifier|capitalize }} fullnode+wallet container"
  when: forkRequirementsInstanceItem.startOption == 'fullnode+wallet'
  become: yes
  become_user: "{{ forkSystemUsername }}"
  community.docker.docker_container:
    name: "{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}"
    image: "{{ forkIdentifier }}:latest"
    hostname: "{{ forkIdentifier }}.{{ forkRequirementsInstanceItem.name }}"
    state: "{{ (forkRequirementsInstanceItem.enabled|default(true))|ternary('started', 'stopped') }}"
    recreate: yes
    restart_policy: unless-stopped
    env:
      light: 'true'
      log_level: INFO
      keys: "/root/.{{ forkIdentifier }}/mainnet/config/.mnemonics"
    networks:
      - name: "{{ forkIdentifier }}-network"
    published_ports:
      - "{{ forkBuildRequirementsDescriptor.nodePort }}:{{ forkBuildRequirementsDescriptor.nodePort }}"
    volumes:
      - "{{ forkHomeDirectory }}/.{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}:/root/.{{ forkIdentifier }}"
    container_default_behavior: no_defaults
    network_mode: "{{ forkIdentifier }}-network"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
    DOCKER_HOST: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"   
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem


  ## Wallet container

- name: "Start {{ forkIdentifier|capitalize }} wallet only container"
  when: forkRequirementsInstanceItem.startOption == 'wallet'
  become: yes
  become_user: "{{ forkSystemUsername }}"
  community.docker.docker_container:
    name: "{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}"
    image: "{{ forkIdentifier }}:latest"
    hostname: "{{ forkIdentifier }}.{{ forkRequirementsInstanceItem.name }}"
    state: "{{ (forkRequirementsInstanceItem.enabled|default(true))|ternary('started', 'stopped') }}"
    recreate: yes
    restart_policy: unless-stopped
    env:
      wallet: 'true'
      fullnode_address: "{{ forkIdentifier }}.{{ forkBuildRequirementsDescriptor.fullnodeName }}"
      log_level: INFO
      keys: "/root/.{{ forkIdentifier }}/mainnet/config/.mnemonics"
    networks:
      - name: "{{ forkIdentifier }}-network"
    volumes:
      - "{{ forkHomeDirectory }}/.{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}:/root/.{{ forkIdentifier }}"
    container_default_behavior: no_defaults
    network_mode: "{{ forkIdentifier }}-network"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
    DOCKER_HOST: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"   
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem


  ## Harvester container

- name: "Ensure {{ forkIdentifier|capitalize }} CA cert(s) local directory"
  when: forkRequirementsInstanceItem.startOption == 'harvester'
  become: yes
  file:
    path: "{{ forkHomeDirectory }}/.{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}-cacert"
    state: directory
    owner: "{{ forkSystemUsername }}"
    group: "{{ forkSystemUsername }}"
    mode: 0700
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem

- name: "Place {{ forkIdentifier|capitalize }} CA cert(s) in local directory"
  when: forkRequirementsInstanceItem.startOption == 'harvester'
  vars:
    contextProductStoreAction: restore
    contextComponentIdentifier: "{{ mavenoForksComponentIdentifier }}"
    contextProductOrganization: "{{ mavenoVendorIdentifier }}"
    contextProductLabel: "ca_cert-{{ forkRequirementsInstanceItem.farmerAddress }}-{{ forkIdentifier }}"
    contextProductDirectory: "{{ forkHomeDirectory }}/.{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}-cacert/ca"
    contextSystemUser: "{{ forkSystemUsername }}"
  include_tasks: productStore.yml
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: certificates

  #HINT: Double regex map due to bug of ansible map filter "xxx:xxx:"
- name: "Start {{ forkIdentifier|capitalize }} harvester container"
  when: forkRequirementsInstanceItem.startOption == 'harvester'
  become: yes
  become_user: "{{ forkSystemUsername }}"
  community.docker.docker_container:
    name: "{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}"
    image: "{{ forkIdentifier }}:latest"
    hostname: "{{ forkIdentifier }}.{{ forkRequirementsInstanceItem.name }}"
    state: "{{ (forkRequirementsInstanceItem.enabled|default(true))|ternary('started', 'stopped') }}"
    recreate: yes
    restart_policy: unless-stopped
    env:
      harvester: 'true'
      farmer_address: "{{ forkRequirementsInstanceItem.farmerAddress }}"
      farmer_port: "{{ forkRequirementsInstanceItem.farmerPort }}"
      plots_dir: "{{ (forkRequirementsInstanceItem.plotDirectories|default([]))|join(':') }}"
      ca: "/root/.{{ forkIdentifier }}-cacert/ca"
      log_level: INFO
      keys: "copy"
    networks:
      - name: "{{ forkIdentifier }}-network"
    volumes: "{{ [forkHomeDirectory + '/.' + forkIdentifier + '-' + forkRequirementsInstanceItem.name + '/:/root/.' + forkIdentifier+'/'] + [forkHomeDirectory + '/.' + forkIdentifier + '-' + forkRequirementsInstanceItem.name + '-cacert/ca:/root/.' + forkIdentifier+'-cacert/ca'] + (forkRequirementsInstanceItem.plotDirectories|default([]) | map('regex_replace', '(.*)', '\\1:\\1') | map('regex_replace', '(.*):', '\\1') | list) }}"
    container_default_behavior: no_defaults
    network_mode: "{{ forkIdentifier }}-network"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
    DOCKER_HOST: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"   
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: certificates


  #HINT: To prevent corruption of blockchain databases
- name: "Let {{ forkIdentifier|capitalize }} instances come up"
  pause:
    seconds: 55


...
