---


- name: "Generate .bashrc for {{ forksComponentIdentifier|capitalize }} system user"
  vars:
    contextSystemUsername: "{{ forksNodeSystemUsername }}"
    contextHomeDirectory: "{{ forksNodeHomeDirectory }}"
    contextRemoveExistingFile: yes
    contextNonInteractiveRules:
      - export XDG_RUNTIME_DIR=/run/user/$(id -u)
      - export DOCKER_HOST=unix:///run/user/$(id -u)/docker.sock
  include_role:
    name: maveno_de.forks.utilities
    tasks_from: generateBashRc.yml


  #RESULT: forkUserIdShellResult.stdout
- name: "Get uid of {{ forksComponentIdentifier|capitalize }} system user"
  become: true
  shell: "id -u {{ forksNodeSystemUsername }} | cat"
  changed_when: false
  register: forkUserIdShellResult
  tags: certificates

- name: "Setup rootless Docker service for user {{ forksNodeSystemUsername }}"
  vars:
    forksDockerSystemUsername: "{{ forksNodeSystemUsername }}"
    forksDockerHomeDirectory: "{{ forksNodeHomeDirectory }}"
  include_role:
    name: maveno_de.forks.rootless_docker


## Backup

# - name: "Ensure {{ forksComponentIdentifier|capitalize }} container backup data directory"
#   when: 
#     - forksBackupDataDirectory is defined
#   become: true
#   file:
#     path: "{{ forksBackupDataDirectory }}/{{ forksComponentIdentifier }}-{{ forkRequirementsInstanceItem.name }}"
#     state: directory
#     owner: "{{ forksManagingSystemUsername|default('root') }}"
#     group: "{{ forksManagingSystemUsername|default('root') }}"
#     mode: 0700
#   loop: "{{ forkBuildRequirementsDescriptor.instances }}"
#   loop_control:
#     loop_var: forkRequirementsInstanceItem
#   tags: services


  # Build Container

- name: "Clone forks-docker repository for {{ forksNodeForkIdentifier|capitalize }}"
  become: true
  become_user: "{{ forksNodeSystemUsername }}"
  git:
    repo: https://github.com/maveno-de/forks-docker.git
    version: main
    dest: "{{ forksNodeSharedDirectory }}/forks-docker"
    force: true
    umask: '0027'
  environment:
    SSL_CERT_DIR: /etc/ssl/certs
    REQUESTS_CA_BUNDLE: "{{ forksSystemCaCertificatesFilePath }}"

- name: "Build {{ forksNodeForkIdentifier|capitalize }} docker image"
  when: forksNodeDefaultBranch == forksDefaultBranch
  become: true
  become_user: "{{ forksNodeSystemUsername }}"
  community.docker.docker_image:
    name: "forks-{{ forksNodeForkIdentifier }}"
    state: present
    build:
      nocache: true
      path: "{{ forksNodeSharedDirectory }}/forks-docker/src/{{ forksNodeForkIdentifier }}-docker"
      platform: "{{ forksPlatformLookupTable[forksSystemArchitecture] }}"
    source: build
    force_source: true
    docker_host: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
  async: "{{ (1800 * forksJobTimeFactor|default(1))|int }}" # 30 mins * time factor
  poll: 0
  register: forkDockerImageBuildJob

- name: "Wait for {{ forksNodeForkIdentifier|capitalize }} docker image being built"
  when: forksNodeDefaultBranch == forksDefaultBranch
  become: true
  become_user: "{{ forksNodeSystemUsername }}"
  async_status:
    jid: "{{ forkDockerImageBuildJob.ansible_job_id }}"
  register: asyncStatusResult
  until: asyncStatusResult.finished
  retries: "{{ (90 * forksJobTimeFactor|default(1))|int }}" # 30 mins * time factor
  delay: 20

- name: "Build {{ forksNodeForkIdentifier|capitalize }} docker image ({{ forkBuildRequirementsDescriptor.branch }})"
  when: forksNodeDefaultBranch != forksDefaultBranch
  become: true
  become_user: "{{ forksNodeSystemUsername }}"
  community.docker.docker_image:
    name: "forks-{{ forksNodeForkIdentifier }}"
    state: present
    build:
      nocache: true
      path: "{{ forksNodeSharedDirectory }}/forks-docker/src/{{ forksNodeForkIdentifier }}-docker"
      platform: "{{ forksPlatformLookupTable[forksSystemArchitecture] }}"
      args:
        BRANCH: "{{ forksNodeDefaultBranch }}"
    source: build
    force_source: true
    docker_host: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
  async: "{{ (1800 * forksJobTimeFactor|default(1))|int }}" # 30 mins * time factor
  poll: 0
  register: forkDockerImageBuildJob

- name: "Wait for {{ forksNodeForkIdentifier|capitalize }} docker image ({{ forkBuildRequirementsDescriptor.branch }}) being built"
  when: forksNodeDefaultBranch != forksDefaultBranch
  become: true
  become_user: "{{ forksNodeSystemUsername }}"
  async_status:
    jid: "{{ forkDockerImageBuildJob.ansible_job_id }}"
  register: asyncStatusResult
  until: asyncStatusResult.finished
  retries: "{{ (90 * forksJobTimeFactor|default(1))|int }}" # 30 mins * time factor
  delay: 20


- name: Start {{ forksNodeForkIdentifier|capitalize }} docker network
  become: true
  become_user: "{{ forksNodeSystemUsername }}"
  community.docker.docker_network:
    name: "{{ forksNodeForkIdentifier }}-network"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
    DOCKER_HOST: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"


...
