---


  #RESULT: forkUserIdShellResult.stdout
- name: "Get uid of {{ forksComponentIdentifier|capitalize }} system user"
  become: true
  shell: "id -u {{ forksComponentSystemUsername }} | cat"
  changed_when: false
  register: forkUserIdShellResult
  tags: certificates

- name: "Create {{ forksComponentIdentifier|capitalize }} system user"
  when: forkUserIdShellResult.stdout == ''
  become: true
  user:
    name: "{{ forksComponentSystemUsername }}"
    home: "{{ forksComponentHomeDirectory }}"
    comment: "{{ forksComponentIdentifier|capitalize }}"
    shell: /bin/bash
    umask: '0027'

     # Due to ansible warning
- name: Ensure remote temp dir for ansible
  become: true
  file:
    path: "{{ forksComponentHomeDirectory }}/.ansible/tmp"
    state: directory
    owner: "{{ forksComponentSystemUsername }}"
    group: "{{ forksComponentSystemUsername }}"
    mode: 0700

- name: "Set permissions on {{ forksComponentIdentifier|capitalize }} home directory"
  become: true
  file:
    path: "{{ forksComponentHomeDirectory }}"
    state: directory
    owner: "{{ forksComponentSystemUsername }}"
    group: "{{ forksComponentSystemUsername }}"
    mode: o=


  #TODO: Role is not idempotent with current when clause, stopping with error 
  # when running on existing rootless docker in the corresponding user
  #HINT: Stopping all running containers to prevent timeouts
  # when building due to cpu time consumption
#- name: "Remove rootless docker service for user {{ forksComponentSystemUsername }}"
#  #when: forkUserIdShellResult.stdout != ''
#  include_tasks: remove-rootless.yml

#- name: Prepare rootless docker service
#  when: not forkRootlessDockerIsPrepared is defined
#  include_tasks: "prepare-rootless-{{ forksDockerInstallationOption }}.yml"
#  
#- name: Set docker rootless prepared status
#  set_fact:
#    forkRootlessDockerIsPrepared: yes

- name: "Setup rootless Docker service for user {{ forksComponentSystemUsername }}"
  vars:
    forksDockerSystemUsername: "{{ forksComponentSystemUsername }}"
    forksDockerHomeDirectory: "{{ forksComponentHomeDirectory }}"
  include_role:
    name: maveno_de.forks_collection.rootless_docker


- name: "Generate .bashrc for {{ forksComponentIdentifier|capitalize }} system user"
  vars:
    contextSystemUsername: "{{ forksComponentSystemUsername }}"
    contextHomeDirectory: "{{ forksComponentHomeDirectory }}"
    contextRemoveExistingFile: yes
  include_role:
    name: maveno_de.forks_collection.forks_utilities
    tasks_from: generateBashRc.yml

- name: Ensure .ssh directory for {{ forksComponentIdentifier|capitalize }} system user"
  become: true
  file:
    path: "{{ forksComponentHomeDirectory }}/.ssh"
    state: directory
    owner: "{{ forksComponentSystemUsername }}"
    group: "{{ forksComponentSystemUsername }}"
    mode: 0700

- name: "Adding SSH public keys to user {{ forksComponentSystemUsername }}"
  when:
    - forksPublicSshKeys is defined
    - forksPublicSshKeys|length > 0
  become: true
  authorized_key:
    user: "{{ forksComponentSystemUsername }}"
    key: "{{ forksPublicSshKeys|map(attribute='sshkey')|join('\n') }}"
    exclusive: true


- name: "Ensure {{ forksComponentIdentifier|capitalize }} local directories"
  become: true
  file:
    path: "{{ forksComponentHomeDirectory }}/.local/{{ forkLocalDirectoryItem }}"
    state: directory
    owner: "{{ forksComponentSystemUsername }}"
    group: "{{ forksComponentSystemUsername }}"
    mode: 0750
  loop:
    - share
    - bin
  loop_control:
    loop_var: forkLocalDirectoryItem

  #RESULT: forkUserIdShellResult.stdout
- name: "Get uid of {{ forksComponentIdentifier|capitalize }} system user"
  become: true
  shell: "id -u {{ forksComponentSystemUsername }}"
  changed_when: false
  register: forkUserIdShellResult
  tags: certificates


## rootless Docker

- name: X Add Docker environment variables to context system user
  vars:
    contextBashRcFilePath: "{{ forksComponentHomeDirectory }}/.bashrc"
    contextNonInteractiveRules:
      - export XDG_RUNTIME_DIR=/run/user/$(id -u)
      - export DOCKER_HOST=unix:///run/user/$(id -u)/docker.sock
  include_role:
    name: maveno_de.forks_collection.forks_utilities
    tasks_from: addNonInteractiveRulesToBashRc.yml

- name: "Get services for user {{ forksComponentSystemUsername }}"
  become: true
  become_user: "{{ forksComponentSystemUsername }}"
  shell: systemctl --user status docker.service
  args:
    executable: /bin/bash
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
    DOCKER_HOST: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"  
  register: forkDockerServiceStatusResult
  changed_when: false
  failed_when: false

- name: "Set docker service status for user {{ forksComponentSystemUsername }}"
  set_fact:
    forkDockerServiceIsRunning: "{{ (forkDockerServiceStatusResult.rc == 0 and 'loaded' in forkDockerServiceStatusResult.stdout_lines.1 and 'active' in forkDockerServiceStatusResult.stdout_lines.2)|bool }}"


- name: "Install rootless docker for {{ forksComponentIdentifier|capitalize }}"
  when: not forkDockerServiceIsRunning
  include_tasks: install-rootless.yml


- name: Restart {{ forksComponentIdentifier|capitalize }} rootless Docker service
  become: true
  become_user: "{{ forksComponentSystemUsername }}"
  systemd: 
    name: docker.service
    daemon_reload: yes
    state: restarted
    scope: user
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
    DOCKER_HOST: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock" 
  changed_when: false


## Backup

- name: "Ensure {{ forksComponentIdentifier|capitalize }} container backup data directory"
  when: 
    - forksBackupDataDirectory is defined
  become: true
  file:
    path: "{{ forksBackupDataDirectory }}/{{ forksComponentIdentifier }}-{{ forkRequirementsInstanceItem.name }}"
    state: directory
    owner: "{{ forksManagingSystemUsername|default('root') }}"
    group: "{{ forksManagingSystemUsername|default('root') }}"
    mode: 0700
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: services


## Wallet kicker

- name: Generate wallet kicker script template
  when:
    - not forkWalletKickerScriptDockerCreated is defined 
    - "'wallet' in forksComponentComponentType"
  become: true
  template:
    src: wallet-kicker-docker.sh.j2
    dest: "{{ forksManagingHomeDirectory|default('/root') }}/.local/bin/wallet-kicker-docker.sh"
    force: yes
    owner: "{{ forksManagingSystemUsername|default('root') }}"
    group: "{{ forksManagingSystemUsername|default('root') }}"
    mode: 0755
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: services

- set_fact:
    forkWalletKickerScriptDockerCreated: yes
  when: "'wallet' in forksComponentComponentType"
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: services

...
