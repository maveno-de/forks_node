---


## Backup config

- name: "Create config backup directory for Forks node {{ forksNodeIdentifier }}"
  become: true
  file:
    path: "{{ forksNodeHomeDirectory }}/.local/var/backup"
    state: directory
    owner: "{{ forksNodeSystemUsername }}"
    group: "{{ forksNodeSystemUsername }}"
    mode: 0750
  tags: config

- name: "Create backup of config file for Forks node {{ forksNodeIdentifier }}"
  become: true
  copy:
    src: >-
      {{ forksNodeHomeDirectory }}/{{
      forksNodeConfigurationDirectoryName
      }}/mainnet/config/config.yaml
    dest: >-
      {{ forksNodeHomeDirectory }}/.local/var/backup/config-{{
      ansible_date_time.iso8601 }}.yaml
    remote_src: true
    owner: "{{ forksNodeSystemUsername }}"
    group: "{{ forksNodeSystemUsername }}"
    mode: 0750
  tags: config


## Modify config

- name: "Fetch config data of Forks node {{ forksNodeIdentifier }}"
  when: "'config' in forksNodeConfiguration.keys()"
  become: true
  slurp:
    src: >-
      {{ forksNodeHomeDirectory }}/{{ 
      forksNodeConfigurationDirectoryName }}/mainnet/config/config.yaml
  register: nodeConfigSlurpResult
  tags: config

- name: "Store modified Fork config data for Forks node {{ forksNodeIdentifier }}"
  when: "'config' in forksNodeConfiguration.keys()"
  become: true
  vars:
    forkConfigurationData: "{{ nodeConfigSlurpResult['content'] | b64decode | from_yaml }}"
  copy:
    dest: >-
      {{ forksNodeHomeDirectory }}/{{
      forksNodeConfigurationDirectoryName }}/mainnet/config/config.yaml
    content: >-
      {{ forkConfigurationData | combine(forksNodeConfiguration.config
      | default({}), recursive=True) | to_yaml }}
    owner: "{{ forksNodeSystemUsername }}"
    group: "{{ forksNodeSystemUsername }}"
    mode: 0750
    force: true
  tags: config

  # HINT: Filter to_yaml appears messing up data types, here quoting port numbers making
  # them strings. Current verision Chia (1.7.0) will not run properly with port numbers
  # given as strings. Quotes in lines containing port numbers are stripped of quotes here.
- name: "Remove quotes in modified config file of Forks node {{ forksNodeIdentifier }}"
  when: "'config' in forksNodeConfiguration.keys()"
  become: true
  command: >-
    sed -i /{{ nodeConfigurationMatchTokenItem }}:/s/\'//g
    "{{ forksNodeHomeDirectory }}/{{
    forksNodeConfigurationDirectoryName }}/mainnet/config/config.yaml"
  loop:
    - host
    - port
  loop_control:
    loop_var: nodeConfigurationMatchTokenItem
  changed_when: false
  tags: config


  # Cronjobs

- name: "Adds paths to CA certs to crontab of Forks node {{ forksNodeIdentifier }}"
  become: true
  cron:
    name: REQUESTS_CA_BUNDLE
    user: "{{ forksNodeSystemUsername }}"
    env: yes
    job: "{{ forksSystemCaCertificatesFilePath }}"

- name: "Adds certs path to crontab of Forks node {{ forksNodeIdentifier }}"
  become: true
  cron:
    name: SSL_CERT_DIR
    user: "{{ forksNodeSystemUsername }}"
    env: yes
    job: /etc/ssl/certs


  # Auto-updates

- name: "Generate auto-update script for Forks node {{ forksNodeIdentifier }}"
  when:
    - "'updateHour' in forksSettings[forkIdentifier].keys()"
    - "'updateMinute' in forksSettings[forkIdentifier].keys()"
  become: true
  template:
    src: update-git.sh.j2
    dest: "{{ forksManagingLocalBinaryDirectory }}/update-{{ forksNodeIdentifier }}.sh"
    force: true
    owner: "{{ forksManagingSystemUsername | default('root') }}"
    group: "{{ forksManagingSystemUsername | default('root') }}"
    mode: 0750
  tags: updates

- name: "Setup auto-update cronjob for Forks node {{ forksNodeIdentifier }}"
  when:
    - "'updateHour' in forksSettings[forkIdentifier].keys()"
    - "'updateMinute' in forksSettings[forkIdentifier].keys()"
  become: true
  cron:
    name: "{{ forksNodeIdentifier }} daily auto-update"
    user: "{{ forksManagingSystemUsername | default('root') }}"
    hour: "{{ forksSettings[forkIdentifier]['updateHour'] | default('undefined') | string }}"
    minute: "{{ forksSettings[forkIdentifier]['updateMinute'] | default('undefined') |string }}"
    job: "sudo {{ forksManagingLocalBinaryDirectory }}/update-{{ forksNodeIdentifier }}.sh 1>/dev/null 2>&1"
  tags: updates


- name: "Generate service file for Forks node {{ forksNodeIdentifier }}"
  become: true
  template:
    src: fork-git.service.j2
    dest: "{{ forksSystemServiceDirectory }}/{{ forksNodeServiceName }}.service"
    force: true
    owner: root
    group: root
    mode: 0644


  ## Firewall

- name: "Allow node network traffic for Forks node {{ forksNodeIdentifier }}"
  when: 
    - "'services' in forksNodeConfiguration.keys()"
    - "'node' in forksNodeConfiguration.services"
  become: true
  ufw:
    rule: allow
    port: "{{ forksProperties[forkIdentifier]['nodePort'] }}"
    proto: tcp

- name: "Allow farmer network traffic for Forks node {{ forksNodeIdentifier }}"
  when: 
    - "'services' in forksNodeConfiguration.keys()"
    - >-
      'farmer' in forksNodeConfiguration.services
      or 'farmer-only' in forksNodeConfiguration.services
  become: true
  ufw:
    rule: allow
    port: "{{ forksProperties[forkIdentifier]['farmerPort'] }}"
    proto: tcp


  # Daily backup

- name: "Create local cache directory for Forks node {{ forksNodeIdentifier }}"
  when:
    - forksBackupDataDirectory is defined
    - "'node' in forksNodeConfiguration.services"
    - "'backupHour' in forksSettings[forkIdentifier].keys()"
    - "'backupMinute' in forksSettings[forkIdentifier].keys()"
  become: true
  file:
    path: "{{ forksNodeHomeDirectory }}/.local/forks/cache"
    state: directory
    owner: "{{ forksNodeSystemUsername }}"
    group: "{{ forksNodeSystemUsername }}"
    mode: 0750
  tags: backups

- name: "Generate backup scripts for Forks node {{ forksNodeIdentifier }}"
  when:
    - forksBackupDataDirectory is defined
    - "'node' in forksNodeConfiguration.services"
    - "'backupHour' in forksSettings[forkIdentifier].keys()"
    - "'backupMinute' in forksSettings[forkIdentifier].keys()"
  become: true
  template:
    src: backup-git.sh.j2
    dest: "{{ forksManagingHomeDirectory | default('/root') }}/.local/bin/backup-{{ forksNodeIdentifier }}.sh"
    force: true
    owner: "{{ forksManagingSystemUsername | default('root') }}"
    group: "{{ forksManagingSystemUsername | default('root') }}"
    mode: 0755
  tags: backups

- name: "Setup blockchain backup cronjob for Forks node {{ forksNodeIdentifier }}"
  when:
    - forksBackupDataDirectory is defined
    - "'node' in forksNodeConfiguration.services"
    - "'backupHour' in forksSettings[forkIdentifier].keys()"
    - "'backupMinute' in forksSettings[forkIdentifier].keys()"
  become: true
  cron:
    name: "{{ forksNodeIdentifier }} daily backup"
    user: "{{ forksManagingSystemUsername | default('root') }}"
    hour: "{{ forksSettings[forkIdentifier]['backupHour'] | default('undefined') }}"
    minute: "{{ forksSettings[forkIdentifier]['backupMinute'] | default('undefined') }}"
    job: >-
      sudo {{ forksManagingHomeDirectory | default('/root') }}/.local/bin/backup-{{ forksNodeIdentifier }}.sh
      >> {{ forksLoggingDirectory }}/{{ forksNodeIdentifier }}_daily_backup.log
  tags: backups

# Aliases

- name: "Adding aliases to .bashrc of managing user for Forks node {{ forksNodeIdentifier }}"
  become: true
  blockinfile:
    path: "{{ forksManagingHomeDirectory | default('/root') }}/.bashrc"
    insertafter: '^#NON-INTERACTIVE.*'
    marker: "# {mark} {{ forksNodeIdentifier }} ALIASES"
    owner: "{{ forksManagingSystemUsername | default('root') }}"
    group: "{{ forksManagingSystemUsername | default('root') }}"
    mode: 0640
    block: |
      {{ forksNodeAlias }}() {
          sudo su - {{ forksNodeSystemUsername }} -c "{{
      forksNodeApplicationDirectory }}/venv/bin/{{ forksNodeExecutableName }} $*"
      }
      alias tail_{{ forksNodeAlias }}="sudo tail -f {{ forksNodeHomeDirectory }}/{{
      forksNodeConfigurationDirectoryName }}/mainnet/log/debug.log"
  tags: aliases


...
