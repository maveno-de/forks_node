---


## Modify config

- name: forksComponentItem
  debug:
    msg: "{{ forksComponentItem }}"

- name: Fetch Fork config data
  when: "'config' in forksComponentItem.keys()"
  become: true
  slurp:
    src: "{{ forksConfigurationDirectory }}/mainnet/config/config.yaml"
  register: configSlurpResult


- name: Store modified Fork config data
  when: "'config' in forksComponentItem.keys()"
  become: true
  vars:
    forksNodeSystemUsername: >-
      {{ ('username' in forksComponentItem)
      |ternary(forksComponentItem['username'],
      forksComponentItem['identifier']) }}
    forkConfigurationData: "{{ configSlurpResult['content'] | b64decode | from_yaml }}"
  copy:
    dest: "{{ forksConfigurationDirectory }}/mainnet/config/config.yaml"
    content: "{{ forkConfigurationData | combine(forksComponentItem.config, recursive=True)|to_yaml }}"
    owner: "{{ forksNodeSystemUsername }}"
    group: "{{ forksNodeSystemUsername }}"
    mode: 0750
    force: true


# - name: "Add {{ forksComponentIdentifier|capitalize }} wallet key"
#   when: 
#     - forksComponentService != 'harvester'
#     - "'mnemonics' in (lookup('file', 'files/credentials/' + inventory_hostname + '.yml')|from_yaml).forks[forksComponentIdentifier].keys()" #!
#   become: true
#   block:
# 
#     - name: "Place {{ forksComponentIdentifier|capitalize }} mnemonics file"
#       copy:
#         dest: "{{ forksNodeApplicationDirectory }}/.mnemonics"
#         content: "{{ (lookup('file', 'files/credentials/' + inventory_hostname + '.yml')|from_yaml).forks[forksComponentIdentifier].mnemonics }}" #!
#         owner: "{{ forksNodeSystemUsername }}"
#         group: "{{ forksNodeSystemUsername }}"
#         mode: 0600
# 
#     - name: "Add {{ forksComponentIdentifier|capitalize }} wallet key"
#       become_user: "{{ forksNodeSystemUsername }}"
#       shell: >
#         . {{ forksNodeApplicationDirectory }}/venv/bin/activate
#         && {{ forksNodeExecutableName }} keys add
#         -f {{ forksNodeApplicationDirectory }}/.mnemonics
#       args:
#         chdir: "{{ forksNodeApplicationDirectory }}"
#         executable: /bin/bash
# 
#   always:
#     - name: Remove mnemonics file
#       file:
#         path: "{{ forksNodeApplicationDirectory }}/.mnemonics"
#         state: absent



  # Cronjobs

# - name: "Adds paths to CA certs to {{ forksComponentIdentifier|capitalize }} crontab"
#   become: true
#   cron:
#     name: REQUESTS_CA_BUNDLE
#     user: "{{ forksNodeSystemUsername }}"
#     env: yes
#     job: "{{ forksSystemCaCertificatesFilePath }}"
# 
# - name: "Adds certs path to {{ forksComponentIdentifier|capitalize }} crontab"
#   become: true
#   cron:
#     name: SSL_CERT_DIR
#     user: "{{ forksNodeSystemUsername }}"
#     env: yes
#     job: /etc/ssl/certs


  # Auto-updates


- name: "Generate {{ forksComponentIdentifier }} auto-update script"
  when:
    - "'updateHour' in forksPropertiesLookupTable[forksNodeForkIdentifier].keys()"
    - "'updateMinute' in forksPropertiesLookupTable[forksNodeForkIdentifier].keys()"
  become: true
  template:
    src: update-git.sh.j2
    dest: "{{ forksManagingLocalBinaryDirectory }}/update-{{ forksComponentIdentifier }}.sh"
    force: true
    owner: "{{ forksManagingSystemUsername|default('root') }}"
    group: "{{ forksManagingSystemUsername|default('root') }}"
    mode: 0750
  tags: updates

- name: "Setup daily cronjob for {{ forksComponentIdentifier }} auto-update"
  when:
    - "'updateHour' in forksPropertiesLookupTable[forksNodeForkIdentifier].keys()"
    - "'updateMinute' in forksPropertiesLookupTable[forksNodeForkIdentifier].keys()"
  become: true
  cron:
    name: "{{ forksComponentIdentifier }} daily auto-update"
    user: "{{ forksManagingSystemUsername|default('root') }}"
    hour: "{{ forksPropertiesLookupTable[forksNodeForkIdentifier]['updateHour']|string }}"
    minute: "{{ forksPropertiesLookupTable[forksNodeForkIdentifier]['updateMinute']|string }}"
    job: "sudo {{ forksManagingLocalBinaryDirectory }}/update-{{ forksComponentIdentifier }}.sh 1>/dev/null 2>&1"
  tags: updates


# - name: Slurp .bashrc file from managing user
#   become: true
#   slurp:
#     src: "{{ forksManagingHomeDirectory|default('/root') }}/.bashrc"
#   register: managingUserBashRcResult
#   tags: utilities

# - name: Cache content of managung user .bashrc file
#   set_fact:
#     managingUserBashRcFileContent: "{{ managingUserBashRcResult['content'] | b64decode }}"
#   tags: utilities

  #TODO: Separate into utils/services
# - name: "Adding aliases for {{ forksComponentIdentifier|capitalize }} to .bashrc of managing user"
#   when: not forkBuildRequirementsDescriptor.alias|default(forksComponentIdentifier) in managingUserBashRcFileContent
#   become: true
#   lineinfile:
#     path: "{{ forksManagingHomeDirectory|default('/root') }}/.bashrc"
#     line: |
#       {{ forkBuildRequirementsDescriptor.alias|default(forksComponentIdentifier) }}() {
#           sudo su - {{ forksComponentIdentifier }} -c "{{ forksNodeApplicationDirectory }}/venv/bin/{{ forksNodeExecutableName }} $*"
#       }
#     insertafter: '^#NON-INTERACTIVE.*'
#   tags: utilities

# - name: "Adding tail alias for {{ forksComponentIdentifier|capitalize }} to .bashrc of managing user"
#   become: true
#   lineinfile:
#     path: "{{ forksManagingHomeDirectory|default('/root') }}/.bashrc"
#     line: >-
#       alias tail_{{ forkBuildRequirementsDescriptor.alias
#       | default(forksComponentIdentifier) }}="sudo tail -f {{ forksConfigurationDirectory }}/mainnet/log/debug.log"
#     insertafter: '^#NON-INTERACTIVE.*'
#   tags: utilities

# - name: "Adding log inspector alias for {{ forksComponentIdentifier|capitalize }} to .bashrc of managing user"
#   when: "'fullnode' in forksComponentService"
#   become: true
#   lineinfile:
#     path: "{{ forksManagingHomeDirectory|default('/root') }}/.bashrc"
#     line: >-
#       alias inspect_{{ forkBuildRequirementsDescriptor.alias
#       | default(forksComponentIdentifier) }}="{{ forksManagingHomeDirectory|default('/root') }}/.local/bin/chia-log-analyzer
#       --log={{ forksConfigurationDirectory }}/mainnet/log/debug.log"
#     insertafter: '^#NON-INTERACTIVE.*'
#   tags: utilities


## Active Farmers

#- name: "Appending invocation of showFarmer for {{ forksComponentIdentifier|capitalize }} instance"
#  when: "'farmer' in forksComponentService"
#  become: true
#  lineinfile:
#    path: "{{ forksManagingHomeDirectory|default('/root') }}/.local/bin/show_farmers.sh"
#    line: "showFarmer {{ forksNodeServiceName }}"
#    insertafter: EOL
#  tags: utilities



## Node Performance

#- name: Adding aliases for showing node performance to shell of managing user
#  when: "'fullnode' in forksComponentService"
#  become: true
#  lineinfile:
#    path: "{{ forksManagingHomeDirectory|default('/root') }}/.bashrc"
#    line: "alias node_performance=\"{{ forksManagingHomeDirectory|default('/root') }}/.local/bin/node_performance.py\""
#    insertafter: '^#NON-INTERACTIVE.*'
#  tags: utilities

#- name: "Adding log file for {{ forksComponentIdentifier|capitalize }}"
#  when: "'fullnode' in forksComponentService"
#  become: true
#  lineinfile:
#    path: "{{ forksManagingHomeDirectory|default('/root') }}/.local/bin/node_performance.py"
#    line: "    ('{{ forkBuildRequirementsDescriptor.alias|default(forksComponentIdentifier) }}', '{{ forksConfigurationDirectory }}/mainnet/log/debug.log'),"
#    insertafter: '^LOGFILES.*'
#  tags: utilities


#- name: Set forktools to be installed
#  set_fact:
#    forksInstallForktools: yes
#  tags: utilities


- name: "Generate {{ forksNodeForkIdentifier|capitalize }} service file"
  become: true
  template:
    src: fork-git.service.j2
    dest: "{{ forksSystemServiceDirectory }}/{{ forksNodeServiceName }}.service"
    force: true
    owner: root
    group: root
    mode: 0644


  # <- Restart Forks services 
- name: Distribute certs
  include_role:
    name: maveno_de.forks.forks_utilities
    tasks_from: distributeCertificates.yml


  ## Firewall

- name: "Allow {{ forksComponentIdentifier|capitalize }} node network traffic"
  when: 
    - "'services' in forksComponentItem"
    - "'node' in forksComponentItem.services"
  become: true
  ufw:
    rule: allow
    port: "{{ forksPropertiesLookupTable[forksNodeForkIdentifier]['nodePort'] }}"
    proto: tcp

- name: "Allow {{ forksComponentIdentifier|capitalize }} farmer network traffic"
  when: 
    - "'services' in forksComponentItem"
    - >-
      'farmer' in forksComponentItem.services
      or 'farmer' in forksComponentItem.services
  become: true
  ufw:
    rule: allow
    port: "{{ forksPropertiesLookupTable[forksNodeForkIdentifier]['farmerPort'] }}"
    proto: tcp


#?
- name: "Generate {{ forksNodeBackupForkItem|capitalize }} backup scripts"
  when: forksBackupDataDirectory is defined
  become: true
  template:
    src: backup-forks.sh.j2
    dest: "{{ forksManagingHomeDirectory|default('/root') }}/.local/bin/backup-{{ forksNodeBackupForkItem }}.sh"
    force: true
    owner: "{{ forksManagingSystemUsername|default('root') }}"
    group: "{{ forksManagingSystemUsername|default('root') }}"
    mode: 0755
  loop: >-
    {{ forksComponentsConfiguration
    | selectattr('host', 'equalto', inventory_hostname)
    | selectattr('services', 'defined')
    | selectattr('services', 'contains', 'node')
    | map(attribute='fork') | list }}
  loop_control:
    loop_var: forksNodeBackupForkItem

- name: "Setup daily cronjob for {{ forksNodeBackupForkItem|capitalize }} blockchain backups"
  when: forksBackupDataDirectory is defined
  become: true
  cron:
    name: "{{ forksNodeBackupForkItem|capitalize }} daily backup"
    user: "{{ forksManagingSystemUsername|default('root') }}"
    hour: "{{ forksDatabaseBackupTimeLookupTable[forksNodeBackupForkItem]['hour'] }}"
    minute: "{{ forksDatabaseBackupTimeLookupTable[forksNodeBackupForkItem]['minute'] }}"
    job: "sudo {{ forksManagingHomeDirectory|default('/root') }}/.local/bin/backup-{{ forksNodeBackupForkItem }}.sh"
  loop: >-
    {{ forksComponentsConfiguration
    | selectattr('host', 'equalto', inventory_hostname)
    | selectattr('services', 'defined')
    | selectattr('services', 'contains', 'node')
    | map(attribute='fork') | list }}
  loop_control:
    loop_var: forksNodeBackupForkItem


...
