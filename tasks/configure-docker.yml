---


- name: "Add .mnemonics file to {{ forkIdentifier|capitalize }} instance"
  when: "'mnemonics' in forkRequirementsInstanceItem.keys()"
  no_log: yes
  become: yes
  copy:
    dest: "{{ forkHomeDirectory }}/.{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}/mainnet/config/.mnemonics"
    content: "{{ (((lookup('file', 'files/credentials/' + inventory_hostname + '.yml')|from_yaml).forks[forkIdentifier].instances)|selectattr('name', 'equalto', forkRequirementsInstanceItem.name))[0].mnemonics }}"
    owner: "{{ forkSystemUsername }}"
    group: "{{ forkSystemUsername }}"
    mode: 0600
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem


- name: "Restart {{ forkIdentifier|capitalize }} instance containers"
  when: forkRequirementsInstanceItem.enabled|default(true)
  become: yes
  become_user: "{{ forkSystemUsername }}"
  shell: "docker restart {{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}"
  args:
    executable: /bin/bash
    chdir: "{{ forkHomeDirectory }}"
  environment:
    XDG_RUNTIME_DIR: "/run/user/{{ forkUserIdShellResult.stdout }}"
    DOCKER_HOST: "unix:///run/user/{{ forkUserIdShellResult.stdout }}/docker.sock"   
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem


  ## Aliases

- name: Slurp .bashrc file from managing user
  become: yes
  slurp:
    src: "{{ mavenoManagingHomeDirectory }}/.bashrc"
  register: managingUserBashRcResult
  tags: utilities

- name: Cache content of managung user .bashrc file
  set_fact:
    managingUserBashRcFileContent: "{{ managingUserBashRcResult['content'] | b64decode }}"
  tags: utilities

  #TODO: Separate into utils/services
- name: "Adding aliases for {{ forkIdentifier|capitalize }} to .bashrc of managing user"
  when: not (forkBuildRequirementsDescriptor.alias|default(forkIdentifier))+'-'+forkRequirementsInstanceItem.name+'()' in managingUserBashRcFileContent
  become: yes
  lineinfile:
    path: "{{ mavenoManagingHomeDirectory }}/.bashrc"
    line: |
      {{ forkBuildRequirementsDescriptor.alias|default(forkIdentifier) }}-{{ forkRequirementsInstanceItem.name }}() {
          sudo su - {{ forkSystemUsername }} -c "docker exec -it {{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }} venv/bin/{{ forkExecutableName }} $*"
      }
    insertafter: '^#NON-INTERACTIVE.*'
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: utilities

- name: "Adding tail alias for {{ forkIdentifier|capitalize }} to .bashrc of managing user"
  become: yes
  lineinfile:
    path: "{{ mavenoManagingHomeDirectory }}/.bashrc"
    line: "alias tail_{{ forkBuildRequirementsDescriptor.alias|default(forkIdentifier) }}-{{ forkRequirementsInstanceItem.name }}=\"sudo tail -f {{ forkHomeDirectory }}/.{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}/mainnet/log/debug.log\""
    insertafter: '^#NON-INTERACTIVE.*'
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: utilities

- name: "Adding log inspector alias for {{ forkIdentifier|capitalize }} to .bashrc of managing user"
  when: "'fullnode' in forkRequirementsInstanceItem.startOption"
  become: yes
  lineinfile:
    path: "{{ mavenoManagingHomeDirectory }}/.bashrc"
    line: "alias inspect_{{ forkBuildRequirementsDescriptor.alias|default(forkIdentifier) }}-{{ forkRequirementsInstanceItem.name }}=\"{{ mavenoManagingHomeDirectory }}/.local/bin/chia-log-analyzer --log={{ forkHomeDirectory }}/.{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}/mainnet/log/debug.log\""
    insertafter: '^#NON-INTERACTIVE.*'
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: utilities


  ## Auto-update

  #HINT: For a harvester only node the fullnode entry in descriptor may be ommited.
  # In that case the harvester is used in commit version check
- name: "Generate {{ forkIdentifier|capitalize }} auto-update script"
  vars:
    forkMainNodeName: "{{ forkBuildRequirementsDescriptor.fullnodeName|default(forkRequirementsInstanceItem.name) }}"
  become: yes
  template:
    src: update-docker.sh.j2
    dest: "{{ forkHomeDirectory }}/.local/bin/update-{{ forkIdentifier }}.sh"
    owner: "{{ forkSystemUsername }}"
    group: "{{ forkSystemUsername }}"
    mode: 0755
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: services

- name: "Add cron job for updating {{ forkIdentifier|capitalize }}"
  become: yes
  cron:
    name: "Update {{ forkIdentifier|capitalize }}"
    user: "{{ forkSystemUsername }}"
    job: "{{ forkHomeDirectory }}/.local/bin/update-{{ forkIdentifier }}.sh 1>/dev/null 2>&1"
    state: present
    hour: "{{ forkBuildRequirementsDescriptor.updateHour }}"
    minute: "{{ forkBuildRequirementsDescriptor.updateMinute }}"
  tags: services


  ## Wallet kicker

- name: "Appending invocation of wallet kick for {{ forkIdentifier|capitalize }} instance"
  when: "'wallet' in forkRequirementsInstanceItem.startOption"
  become: yes
  lineinfile:
    path: "{{ mavenoManagingHomeDirectory }}/.local/bin/wallet-kicker-docker.sh"
    line: "kickWallet {{ forkSystemUsername }} {{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}"
    insertafter: EOL
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: services


- name: Ensure cron job for wallet kicker script
  when: "'wallet' in forkRequirementsInstanceItem.startOption"
  become: yes
  cron:
    name: "Kick lazy wallets"
    user: "{{ mavenoManagingSystemUsername }}"
    job: "{{ mavenoManagingHomeDirectory }}/.local/bin/wallet-kicker-docker.sh 1>/dev/null 2>&1"
    state: present
    hour: '*/5'
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: services


## Node Performance

- name: Generate node perfomance script
  when: "'fullnode' in forkRequirementsInstanceItem.startOption"
  become: yes
  template:
    src: node_performance.py.j2
    dest: "{{ mavenoManagingHomeDirectory }}/.local/bin/node_performance.py"
    owner: "{{ mavenoManagingSystemUsername }}"
    group: "{{ mavenoManagingSystemUsername }}"
    mode: 0750
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: utilities

- name: Adding aliases for showing node performance to shell of managing user
  when: "'fullnode' in forkRequirementsInstanceItem.startOption"
  become: yes
  lineinfile:
    path: "{{ mavenoManagingHomeDirectory }}/.bashrc"
    line: "alias node_performance=\"{{ mavenoManagingHomeDirectory }}/.local/bin/node_performance.py\""
    insertafter: '^#NON-INTERACTIVE.*'
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: utilities

- name: "Adding log file for {{ forkIdentifier|capitalize }} instance"
  when: "'fullnode' in forkRequirementsInstanceItem.startOption"
  become: yes
  lineinfile:
    path: "{{ mavenoManagingHomeDirectory }}/.local/bin/node_performance.py"
    line: "    ('{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}', '{{ forkHomeDirectory }}/.{{ forkIdentifier }}-{{ forkRequirementsInstanceItem.name }}/mainnet/log/debug.log'),"
    insertafter: '^LOGFILES.*'
  loop: "{{ forkBuildRequirementsDescriptor.instances }}"
  loop_control:
    loop_var: forkRequirementsInstanceItem
  tags: utilities


- name: Allow {{ forkIdentifier|capitalize }} traffic
  when: "'nodePort' in forkBuildRequirementsDescriptor.keys()"
  become: yes
  ufw:
    rule: allow
    port: "{{ forkBuildRequirementsDescriptor.nodePort }}"
    proto: tcp
  

...
